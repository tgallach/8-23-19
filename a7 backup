{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy.random import shuffle\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(107) # initialize random number generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "PATH = \"http://optimizizer.com/data/tennis2.csv\"  # file location\n",
    "df = pd.read_csv(PATH)  # open csv file and save data to =df="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: display the first rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: select the column speed1 and save it into the variable \"speed1\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: find sample average of \"speed1\", save the result in \"mean1\"\n",
    "# TODO a."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: select the column speed2 and save it into the variable \"speed2\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: find sample average of \"speed2\", save the result in \"mean2\"\n",
    "# TODO b."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: calculate the average of differences speed1-speed2 and \n",
    "# TODO: save it into the variable meandiff\n",
    "# TODO: c."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Permutation Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Pool together the vectors speed1 and speed2, save the result into the variable \"pooled\"\n",
    "pooled = [1, 2, 3] # change this line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "ntrials = 10000 # generate 10000 samples for the permutation test\n",
    "\n",
    "def trial():\n",
    "    shuffle(pooled) # random shuffle\n",
    "    # TODO: split the pooled dataset into two sets A and B\n",
    "    # TODO: calculate average difference between A and B\n",
    "    # TODO: return average difference as the result\n",
    "    return 0 # TODO change this line\n",
    "simdata = [trial() for i in range(ntrials)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([    0.,     0.,     0.,     0.,     0., 10000.,     0.,     0.,\n",
       "            0.,     0.]),\n",
       " array([-0.5, -0.4, -0.3, -0.2, -0.1,  0. ,  0.1,  0.2,  0.3,  0.4,  0.5]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(simdata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95% CI is [0.0;0.0]\n"
     ]
    }
   ],
   "source": [
    "L = np.percentile(simdata,2.5) # calculate 2.5% percentile, part d.\n",
    "U = np.percentile(simdata,97.5) # calculate 97.5% percentile, part e. \n",
    "print(\"95% CI is [{};{}]\".format(L,U))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reporting Results "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fill in the gaps in the summary report below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The 95% interval for the difference in means based on the permutation test is [-5.28215, 5.33742]. The observed difference (diff=-1.806000) is (inside) of this interval. Hence, the difference between two systems (is not) statisitcally significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
